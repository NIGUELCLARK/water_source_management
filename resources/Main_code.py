# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt6 UI code generator 6.6.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from email.mime.multipart import MIMEMultipart
import smtplib
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QApplication,QListWidgetItem,QTableWidgetItem, QLabel, QMessageBox, QHeaderView, QGraphicsBlurEffect, QVBoxLayout, QWidget, QHBoxLayout, QPushButton, QLineEdit, QTableWidget, QVBoxLayout, QDialog, QLabel, QApplication, QDialogButtonBox
import PyQt6
import sqlite3
import sys
from PyQt6.QtCore import QDate, QTime, QTimer, Qt
from email.mime.text import MIMEText
from email_validator import validate_email, EmailNotValidError
from PyQt6.QtGui import QPixmap
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import matplotlib.pyplot as plt
import pandas as pd

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(1073, 666)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.mainStackedWidget = QtWidgets.QStackedWidget(parent=self.centralwidget)
        self.mainStackedWidget.setGeometry(QtCore.QRect(-10, -10, 1111, 691))
        self.mainStackedWidget.setObjectName("mainStackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.label = QtWidgets.QLabel(parent=self.page)
        self.label.setGeometry(QtCore.QRect(10, 10, 1081, 641))
        self.label.setStyleSheet("")
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("./the_colours_of_water.jpg"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(parent=self.page)
        self.label_2.setGeometry(QtCore.QRect(578, 80, 411, 481))
        self.label_2.setStyleSheet("background-color:rgba(8,79,17,0.6);\n"
"border-radius:15px;")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        blur_effect = QGraphicsBlurEffect()
        blur_effect.setBlurRadius(10)  # You can adjust the blur radius as needed
        self.label_2.setGraphicsEffect(blur_effect)
        self.label_3 = QtWidgets.QLabel(parent=self.page)
        self.label_3.setGeometry(QtCore.QRect(720, 90, 141, 121))
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap("./color_logo.png"))
        self.label_3.setScaledContents(True)
        self.label_3.setObjectName("label_3")
        self.lineEdit_userId = QtWidgets.QLineEdit(parent=self.page)
        self.lineEdit_userId.setGeometry(QtCore.QRect(640, 270, 291, 41))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(11)
        self.lineEdit_userId.setFont(font)
        self.lineEdit_userId.setStyleSheet("border-radius:18px;\n"
"color:grey;")
        self.lineEdit_userId.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_userId.setObjectName("lineEdit_userId")
        self.lineEdit_password = QtWidgets.QLineEdit(parent=self.page)
        self.lineEdit_password.setGeometry(QtCore.QRect(640, 350, 291, 41))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(11)
        self.lineEdit_password.setFont(font)
        self.lineEdit_password.setStyleSheet("border-radius:18px;\n"
"color:grey;")
        self.lineEdit_password.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_password.setObjectName("lineEdit_password")
        self.pushButton_login = QtWidgets.QPushButton(parent=self.page)
        self.pushButton_login.setGeometry(QtCore.QRect(740, 430, 111, 41))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(12)
        font.setBold(True)
        self.pushButton_login.setFont(font)
        self.pushButton_login.setStyleSheet("color:white;\n"
"background-color: rgb(19, 158, 116);\n"
"border-radius: 10px;")
        self.pushButton_login.setObjectName("pushButton_login")
        self.label_4 = QtWidgets.QLabel(parent=self.page)
        self.label_4.setGeometry(QtCore.QRect(50, 620, 141, 21))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(10)
        font.setBold(False)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("color:white;")
        self.label_4.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(parent=self.page)
        self.label_5.setGeometry(QtCore.QRect(10, 610, 41, 41))
        self.label_5.setText("")
        self.label_5.setPixmap(QtGui.QPixmap("./logo_ict.png"))
        self.label_5.setScaledContents(True)
        self.label_5.setObjectName("label_5")
        self.line = QtWidgets.QFrame(parent=self.page)
        self.line.setGeometry(QtCore.QRect(10, 600, 1081, 16))
        self.line.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line.setObjectName("line")
        self.label_6 = QtWidgets.QLabel(parent=self.page)
        self.label_6.setGeometry(QtCore.QRect(50, 310, 441, 61))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(33)
        font.setBold(True)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("color:white;\n"
"letter-spacing:10px;")
        self.label_6.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.mainStackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.label_7 = QtWidgets.QLabel(parent=self.page_2)
        self.label_7.setGeometry(QtCore.QRect(10, 10, 1081, 641))
        self.label_7.setStyleSheet("background-color: rgb(255, 250, 250);")
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(parent=self.page_2)
        self.label_8.setGeometry(QtCore.QRect(170, 0, 921, 101))
        self.label_8.setStyleSheet("background-color: rgb(19, 158, 116);\n"
"border-radius:15px;")
        self.label_8.setText("")
        self.label_8.setObjectName("label_8")
        self.label_users = QtWidgets.QLabel(parent=self.page_2)
        self.label_users.setGeometry(QtCore.QRect(10, 10, 151, 641))
        self.label_users.setStyleSheet("background-color: #139E74;")
        self.label_users.setText("")
        self.label_users.setObjectName("label_users")
        self.label_month = QtWidgets.QLabel(parent=self.page_2)
        self.label_month.setGeometry(QtCore.QRect(190, 110, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(10)
        font.setBold(True)
        self.label_month.setFont(font)
        self.label_month.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:15px;")
        self.label_month.setText("")
        self.label_month.setObjectName("label_month")
        self.label_year = QtWidgets.QLabel(parent=self.page_2)
        self.label_year.setGeometry(QtCore.QRect(550, 110, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(10)
        font.setBold(True)
        self.label_year.setFont(font)
        self.label_year.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:15px;")
        self.label_year.setText("")
        self.label_year.setObjectName("label_year")
        self.label_section = QtWidgets.QLabel(parent=self.page_2)
        self.label_section.setGeometry(QtCore.QRect(530, 30, 181, 41))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(13)
        font.setBold(True)
        self.label_section.setFont(font)
        self.label_section.setStyleSheet("background-color: white;\n"
"border-radius:15px;\n"
"letter-spacing:3px;")
        self.label_section.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_section.setObjectName("label_section")
        self.label_19 = QtWidgets.QLabel(parent=self.page_2)
        self.label_19.setGeometry(QtCore.QRect(990, 20, 81, 81))
        self.label_19.setText("")
        self.label_19.setPixmap(QtGui.QPixmap("./user (1).png"))
        self.label_19.setScaledContents(True)
        self.label_19.setObjectName("label_19")
        self.label_20 = QtWidgets.QLabel(parent=self.page_2)
        self.label_20.setGeometry(QtCore.QRect(30, 20, 91, 71))
        self.label_20.setText("")
        self.label_20.setPixmap(QtGui.QPixmap("./color_logo.png"))
        self.label_20.setScaledContents(True)
        self.label_20.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_20.setObjectName("label_20")
        self.AdminstackedWidget = QtWidgets.QStackedWidget(parent=self.page_2)
        self.AdminstackedWidget.setGeometry(QtCore.QRect(170, 150, 961, 501))
        self.AdminstackedWidget.setStyleSheet("background-color: rgb(255, 250, 250);")
        self.AdminstackedWidget.setObjectName("AdminstackedWidget")
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.label_piechart = QtWidgets.QLabel(parent=self.page_3)
        self.label_piechart.setGeometry(QtCore.QRect(460, 190, 431, 291))
        self.label_piechart.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:15px;")
        self.label_piechart.setText("")
        self.label_piechart.setObjectName("label_piechart")
        self.label_piechart.setScaledContents(True)
        self.label_barchart = QtWidgets.QLabel(parent=self.page_3)
        self.label_barchart.setGeometry(QtCore.QRect(10, 190, 421, 291))
        self.label_barchart.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:15px;")
        self.label_barchart.setText("")
        self.label_barchart.setObjectName("label_barchart")
        self.label_barchart.setScaledContents(True)
        self.label_13 = QtWidgets.QLabel(parent=self.page_3)
        self.label_13.setGeometry(QtCore.QRect(10, 20, 201, 121))
        self.label_13.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:15px;")
        self.label_13.setText("")
        self.label_13.setObjectName("label_13")
        self.label_numberOfModerators = QtWidgets.QLabel(parent=self.page_3)
        self.label_numberOfModerators.setGeometry(QtCore.QRect(80, 70, 71, 61))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(34)
        font.setBold(True)
        self.label_numberOfModerators.setFont(font)
        self.label_numberOfModerators.setStyleSheet("color: rgb(19, 158, 116);\n"
"background-color:white;")
        self.label_numberOfModerators.setObjectName("label_numberOfModerators")
        self.label_16 = QtWidgets.QLabel(parent=self.page_3)
        self.label_16.setGeometry(QtCore.QRect(20, 30, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(11)
        font.setBold(True)
        self.label_16.setFont(font)
        self.label_16.setStyleSheet("letter-spacing:2px;\n"
"background-color:white;")
        self.label_16.setObjectName("label_16")
        self.label_12 = QtWidgets.QLabel(parent=self.page_3)
        self.label_12.setGeometry(QtCore.QRect(230, 20, 201, 121))
        self.label_12.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:15px;")
        self.label_12.setText("")
        self.label_12.setObjectName("label_12")
        self.label_11 = QtWidgets.QLabel(parent=self.page_3)
        self.label_11.setGeometry(QtCore.QRect(460, 20, 201, 121))
        self.label_11.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:15px;")
        self.label_11.setText("")
        self.label_11.setObjectName("label_11")
        self.label_14 = QtWidgets.QLabel(parent=self.page_3)
        self.label_14.setGeometry(QtCore.QRect(690, 20, 201, 121))
        self.label_14.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:15px;")
        self.label_14.setText("")
        self.label_14.setObjectName("label_14")
        self.label_18 = QtWidgets.QLabel(parent=self.page_3)
        self.label_18.setGeometry(QtCore.QRect(240, 30, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(11)
        font.setBold(True)
        self.label_18.setFont(font)
        self.label_18.setStyleSheet("letter-spacing:2px;\n"
"background-color:white;")
        self.label_18.setObjectName("label_18")
        self.label_17 = QtWidgets.QLabel(parent=self.page_3)
        self.label_17.setGeometry(QtCore.QRect(470, 30, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(11)
        font.setBold(True)
        self.label_17.setFont(font)
        self.label_17.setStyleSheet("letter-spacing:2px;\n"
"background-color:white;")
        self.label_17.setObjectName("label_17")
        self.label_15 = QtWidgets.QLabel(parent=self.page_3)
        self.label_15.setGeometry(QtCore.QRect(700, 30, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(11)
        font.setBold(True)
        self.label_15.setFont(font)
        self.label_15.setStyleSheet("letter-spacing:2px;\n"
"background-color:white;")
        self.label_15.setObjectName("label_15")
        self.label_numberOfUsers = QtWidgets.QLabel(parent=self.page_3)
        self.label_numberOfUsers.setGeometry(QtCore.QRect(750, 70, 71, 61))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(34)
        font.setBold(True)
        self.label_numberOfUsers.setFont(font)
        self.label_numberOfUsers.setStyleSheet("color: rgb(19, 158, 116);\n"
"background-color:white;")
        self.label_numberOfUsers.setObjectName("label_numberOfUsers")
        self.label_numberOfLocalities = QtWidgets.QLabel(parent=self.page_3)
        self.label_numberOfLocalities.setGeometry(QtCore.QRect(520, 70, 81, 61))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(34)
        font.setBold(True)
        self.label_numberOfLocalities.setFont(font)
        self.label_numberOfLocalities.setStyleSheet("color: rgb(19, 158, 116);\n"
"background-color:white;")
        self.label_numberOfLocalities.setObjectName("label_numberOfLocalities")
        self.label_numberOfSources = QtWidgets.QLabel(parent=self.page_3)
        self.label_numberOfSources.setGeometry(QtCore.QRect(280, 70, 81, 61))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(34)
        font.setBold(True)
        self.label_numberOfSources.setFont(font)
        self.label_numberOfSources.setStyleSheet("color: rgb(19, 158, 116);\n"
"background-color:white;")
        self.label_numberOfSources.setObjectName("label_numberOfSources")
        self.AdminstackedWidget.addWidget(self.page_3)
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
        self.label_10 = QtWidgets.QLabel(parent=self.page_4)
        self.label_10.setGeometry(QtCore.QRect(330, 20, 181, 161))
        self.label_10.setText("")
        self.label_10.setPixmap(QtGui.QPixmap("./admin.png"))
        self.label_10.setScaledContents(True)
        self.label_10.setObjectName("label_10")
        self.label_21 = QtWidgets.QLabel(parent=self.page_4)
        self.label_21.setGeometry(QtCore.QRect(20, 200, 271, 261))
        self.label_21.setStyleSheet("background-color:white;\n"
"border-radius:15px;")
        self.label_21.setText("")
        self.label_21.setObjectName("label_21")
        self.label_22 = QtWidgets.QLabel(parent=self.page_4)
        self.label_22.setGeometry(QtCore.QRect(330, 200, 271, 261))
        self.label_22.setStyleSheet("background-color:white;\n"
"border-radius:15px;")
        self.label_22.setText("")
        self.label_22.setObjectName("label_22")
        self.label_23 = QtWidgets.QLabel(parent=self.page_4)
        self.label_23.setGeometry(QtCore.QRect(640, 200, 271, 261))
        self.label_23.setStyleSheet("background-color:white;\n"
"border-radius:15px;")
        self.label_23.setText("")
        self.label_23.setObjectName("label_23")
        self.label_24 = QtWidgets.QLabel(parent=self.page_4)
        self.label_24.setGeometry(QtCore.QRect(20, 190, 49, 51))
        self.label_24.setText("")
        self.label_24.setPixmap(QtGui.QPixmap("./add-user.png"))
        self.label_24.setScaledContents(True)
        self.label_24.setObjectName("label_24")
        self.label_25 = QtWidgets.QLabel(parent=self.page_4)
        self.label_25.setGeometry(QtCore.QRect(320, 190, 49, 51))
        self.label_25.setText("")
        self.label_25.setPixmap(QtGui.QPixmap("./delete.png"))
        self.label_25.setScaledContents(True)
        self.label_25.setObjectName("label_25")
        self.label_26 = QtWidgets.QLabel(parent=self.page_4)
        self.label_26.setGeometry(QtCore.QRect(640, 190, 49, 51))
        self.label_26.setText("")
        self.label_26.setPixmap(QtGui.QPixmap("./update-user.png"))
        self.label_26.setScaledContents(True)
        self.label_26.setObjectName("label_26")
        self.lineEdit_userid_add = QtWidgets.QLineEdit(parent=self.page_4)
        self.lineEdit_userid_add.setGeometry(QtCore.QRect(40, 250, 221, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(15)
        font.setBold(True)
        self.lineEdit_userid_add.setFont(font)
        self.lineEdit_userid_add.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-bottom: 1px solid grey;\n"
"border-radius:0px;\n"
"color:grey;")
        self.lineEdit_userid_add.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_userid_add.setObjectName("lineEdit_userid_add")
        self.lineEdit_userEmail_add = QtWidgets.QLineEdit(parent=self.page_4)
        self.lineEdit_userEmail_add.setGeometry(QtCore.QRect(40, 300, 221, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(15)
        font.setBold(True)
        self.lineEdit_userEmail_add.setFont(font)
        self.lineEdit_userEmail_add.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-bottom: 1px solid grey;\n"
"border-radius:0px;\n"
"color:grey;")
        self.lineEdit_userEmail_add.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_userEmail_add.setObjectName("lineEdit_userEmail_add")
        self.lineEdit_password_add = QtWidgets.QLineEdit(parent=self.page_4)
        self.lineEdit_password_add.setGeometry(QtCore.QRect(40, 350, 221, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(15)
        font.setBold(True)
        self.lineEdit_password_add.setFont(font)
        self.lineEdit_password_add.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-bottom: 1px solid grey;\n"
"border-radius:0px;\n"
"color:grey;")
        self.lineEdit_password_add.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_password_add.setObjectName("lineEdit_password_add")
        self.pushButton_addUsers = QtWidgets.QPushButton(parent=self.page_4)
        self.pushButton_addUsers.setGeometry(QtCore.QRect(110, 410, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(12)
        self.pushButton_addUsers.setFont(font)
        self.pushButton_addUsers.setStyleSheet("background-color: #00BCFF;\n"
"border-radius:10px;")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("./add.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButton_addUsers.setIcon(icon)
        self.pushButton_addUsers.setObjectName("pushButton_addUsers")
        self.lineEdit_userid_delete = QtWidgets.QLineEdit(parent=self.page_4)
        self.lineEdit_userid_delete.setGeometry(QtCore.QRect(350, 300, 221, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(15)
        font.setBold(True)
        self.lineEdit_userid_delete.setFont(font)
        self.lineEdit_userid_delete.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-bottom: 1px solid grey;\n"
"border-radius:0px;\n"
"color:grey;")
        self.lineEdit_userid_delete.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_userid_delete.setObjectName("lineEdit_userid_delete")
        self.lineEdit_userid_update = QtWidgets.QLineEdit(parent=self.page_4)
        self.lineEdit_userid_update.setGeometry(QtCore.QRect(680, 250, 221, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(15)
        font.setBold(True)
        self.lineEdit_userid_update.setFont(font)
        self.lineEdit_userid_update.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-bottom: 1px solid grey;\n"
"border-radius:0px;\n"
"color:grey;")
        self.lineEdit_userid_update.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_userid_update.setObjectName("lineEdit_userid_update")
        self.lineEdit_userEmail_update = QtWidgets.QLineEdit(parent=self.page_4)
        self.lineEdit_userEmail_update.setGeometry(QtCore.QRect(680, 300, 221, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(15)
        font.setBold(True)
        self.lineEdit_userEmail_update.setFont(font)
        self.lineEdit_userEmail_update.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-bottom: 1px solid grey;\n"
"border-radius:0px;\n"
"color:grey;")
        self.lineEdit_userEmail_update.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_userEmail_update.setObjectName("lineEdit_userEmail_update")
        self.lineEdit_password_update = QtWidgets.QLineEdit(parent=self.page_4)
        self.lineEdit_password_update.setGeometry(QtCore.QRect(680, 350, 221, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(15)
        font.setBold(True)
        self.lineEdit_password_update.setFont(font)
        self.lineEdit_password_update.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-bottom: 1px solid grey;\n"
"border-radius:0px;\n"
"color:grey;")
        self.lineEdit_password_update.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_password_update.setObjectName("lineEdit_password_update")
        self.pushButton_deleteUsers = QtWidgets.QPushButton(parent=self.page_4)
        self.pushButton_deleteUsers.setGeometry(QtCore.QRect(430, 410, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(12)
        self.pushButton_deleteUsers.setFont(font)
        self.pushButton_deleteUsers.setStyleSheet("background-color: #FFB7B1;\n"
"border-radius:10px;")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("./trash.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButton_deleteUsers.setIcon(icon1)
        self.pushButton_deleteUsers.setObjectName("pushButton_deleteUsers")
        self.pushButton_updateUsers = QtWidgets.QPushButton(parent=self.page_4)
        self.pushButton_updateUsers.setGeometry(QtCore.QRect(760, 410, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(12)
        self.pushButton_updateUsers.setFont(font)
        self.pushButton_updateUsers.setStyleSheet("background-color: #FA6F1E;\n"
"border-radius:10px;")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("./refresh.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButton_updateUsers.setIcon(icon2)
        self.pushButton_updateUsers.setObjectName("pushButton_updateUsers")
        self.AdminstackedWidget.addWidget(self.page_4)
        self.page_5 = QtWidgets.QWidget()
        self.page_5.setObjectName("page_5")
        self.label_27 = QtWidgets.QLabel(parent=self.page_5)
        self.label_27.setGeometry(QtCore.QRect(370, 20, 171, 161))
        self.label_27.setText("")
        self.label_27.setPixmap(QtGui.QPixmap("./user (2).png"))
        self.label_27.setScaledContents(True)
        self.label_27.setObjectName("label_27")
        self.label_28 = QtWidgets.QLabel(parent=self.page_5)
        self.label_28.setGeometry(QtCore.QRect(230, 220, 441, 261))
        self.label_28.setStyleSheet("background-color:white;\n"
"border-radius:15px;")
        self.label_28.setText("")
        self.label_28.setObjectName("label_28")
        self.lineEdit_moderatorName = QtWidgets.QLineEdit(parent=self.page_5)
        self.lineEdit_moderatorName.setGeometry(QtCore.QRect(270, 280, 371, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(15)
        font.setBold(True)
        self.lineEdit_moderatorName.setFont(font)
        self.lineEdit_moderatorName.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-bottom: 1px solid grey;\n"
"border-radius:0px;\n"
"color:grey;")
        self.lineEdit_moderatorName.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_moderatorName.setObjectName("lineEdit_moderatorName")
        self.lineEdit_sourceCode = QtWidgets.QLineEdit(parent=self.page_5)
        self.lineEdit_sourceCode.setGeometry(QtCore.QRect(270, 350, 371, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(15)
        font.setBold(True)
        self.lineEdit_sourceCode.setFont(font)
        self.lineEdit_sourceCode.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-bottom: 1px solid grey;\n"
"border-radius:0px;\n"
"color:grey;")
        self.lineEdit_sourceCode.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_sourceCode.setObjectName("lineEdit_sourceCode")
        self.pushButton_addModerator = QtWidgets.QPushButton(parent=self.page_5)
        self.pushButton_addModerator.setGeometry(QtCore.QRect(290, 420, 121, 41))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(12)
        self.pushButton_addModerator.setFont(font)
        self.pushButton_addModerator.setStyleSheet("background-color: #00BCFF;\n"
"border-radius:10px;")
        self.pushButton_addModerator.setIcon(icon)
        self.pushButton_addModerator.setObjectName("pushButton_addModerator")
        self.listView = QtWidgets.QListWidget(parent=self.page_5)
        self.listView.setGeometry(QtCore.QRect(695, 30, 211, 451))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(12)
        font.setBold(False)
        self.listView.setStyleSheet("background-color:white; border-radius:15px; margin-top:15px; color:grey;margin-left:15px ")
        self.listView.setObjectName("listView")
        self.listView.setFont(font)
        self.label_29 = QtWidgets.QLabel(parent=self.page_5)
        self.label_29.setGeometry(QtCore.QRect(720, 10, 171, 21))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(12)
        font.setBold(True)
        self.label_29.setFont(font)
        self.label_29.setStyleSheet("color:black;\n"
"background-color: rgb(255, 255, 255);\n"
"border-radius:10px")
        self.label_29.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_29.setObjectName("label_29")
        self.pushButton_deleteModerator = QtWidgets.QPushButton(parent=self.page_5)
        self.pushButton_deleteModerator.setGeometry(QtCore.QRect(480, 420, 101, 41))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(12)
        self.pushButton_deleteModerator.setFont(font)
        self.pushButton_deleteModerator.setStyleSheet("background-color: #FFB7B1;\n"
"border-radius:10px;")
        self.pushButton_deleteModerator.setIcon(icon1)
        self.pushButton_deleteModerator.setIconSize(QtCore.QSize(20, 20))
        self.pushButton_deleteModerator.setObjectName("pushButton_deleteModerator")
        self.AdminstackedWidget.addWidget(self.page_5)
        self.page_6 = QtWidgets.QWidget()
        self.page_6.setObjectName("page_6")
        self.label_30 = QtWidgets.QLabel(parent=self.page_6)
        self.label_30.setGeometry(QtCore.QRect(328, 40, 191, 151))
        self.label_30.setText("")
        self.label_30.setPixmap(QtGui.QPixmap("./wave.png"))
        self.label_30.setScaledContents(True)
        self.label_30.setObjectName("label_30")
        self.label_31 = QtWidgets.QLabel(parent=self.page_6)
        self.label_31.setGeometry(QtCore.QRect(190, 220, 481, 261))
        self.label_31.setStyleSheet("background-color:white;\n"
"border-radius:15px;")
        self.label_31.setText("")
        self.label_31.setObjectName("label_31")
        self.lineEdit_sourceName = QtWidgets.QLineEdit(parent=self.page_6)
        self.lineEdit_sourceName.setGeometry(QtCore.QRect(250, 250, 371, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(15)
        font.setBold(True)
        self.lineEdit_sourceName.setFont(font)
        self.lineEdit_sourceName.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-bottom: 1px solid grey;\n"
"border-radius:0px;\n"
"color:grey;")
        self.lineEdit_sourceName.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_sourceName.setObjectName("lineEdit_sourceName")
        self.lineEdit_sourceCode_2 = QtWidgets.QLineEdit(parent=self.page_6)
        self.lineEdit_sourceCode_2.setGeometry(QtCore.QRect(250, 310, 371, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(15)
        font.setBold(True)
        self.lineEdit_sourceCode_2.setFont(font)
        self.lineEdit_sourceCode_2.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-bottom: 1px solid grey;\n"
"border-radius:0px;\n"
"color:grey;")
        self.lineEdit_sourceCode_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_sourceCode_2.setObjectName("lineEdit_sourceCode_2")
        self.lineEdit_sourceCode_3 = QtWidgets.QLineEdit(parent=self.page_6)
        self.lineEdit_sourceCode_3.setGeometry(QtCore.QRect(250, 380, 371, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(15)
        font.setBold(True)
        self.lineEdit_sourceCode_3.setFont(font)
        self.lineEdit_sourceCode_3.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-bottom: 1px solid grey;\n"
"border-radius:0px;\n"
"color:grey;")
        self.lineEdit_sourceCode_3.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_sourceCode_3.setObjectName("lineEdit_sourceCode_3")
        self.pushButton_addSources = QtWidgets.QPushButton(parent=self.page_6)
        self.pushButton_addSources.setGeometry(QtCore.QRect(270, 430, 121, 41))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(12)
        self.pushButton_addSources.setFont(font)
        self.pushButton_addSources.setStyleSheet("background-color: #00BCFF;\n"
"border-radius:10px;")
        self.pushButton_addSources.setIcon(icon)
        self.pushButton_addSources.setObjectName("pushButton_addSources")
        self.pushButton_deleteSource = QtWidgets.QPushButton(parent=self.page_6)
        self.pushButton_deleteSource.setGeometry(QtCore.QRect(480, 430, 101, 41))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(12)
        self.pushButton_deleteSource.setFont(font)
        self.pushButton_deleteSource.setStyleSheet("background-color: #FFB7B1;\n"
"border-radius:10px;")
        self.pushButton_deleteSource.setIcon(icon1)
        self.pushButton_deleteSource.setIconSize(QtCore.QSize(20, 20))
        self.pushButton_deleteSource.setObjectName("pushButton_deleteSource")
        self.AdminstackedWidget.addWidget(self.page_6)
        self.label_time = QtWidgets.QLabel(parent=self.page_2)
        self.label_time.setGeometry(QtCore.QRect(950, 110, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(10)
        font.setBold(True)
        self.label_time.setFont(font)
        self.label_time.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:15px;")
        self.label_time.setText("")
        self.label_time.setObjectName("label_time")
        self.label_day = QtWidgets.QLabel(parent=self.page_2)
        self.label_day.setGeometry(QtCore.QRect(380, 110, 151, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(10)
        font.setBold(True)
        self.label_day.setFont(font)
        self.label_day.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:15px;")
        self.label_day.setText("")
        self.label_day.setObjectName("label_day")
        self.pushButton = QtWidgets.QPushButton(parent=self.page_2)
        self.pushButton.setGeometry(QtCore.QRect(20, 210, 121, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(13)
        font.setBold(True)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-color: #139E74;\n"
"border:1px solid #139E74;\n"
"color:white;")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("./admin.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButton.setIcon(icon3)
        self.pushButton.setIconSize(QtCore.QSize(20, 20))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_moderators = QtWidgets.QPushButton(parent=self.page_2)
        self.pushButton_moderators.setGeometry(QtCore.QRect(20, 270, 121, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(13)
        font.setBold(True)
        self.pushButton_moderators.setFont(font)
        self.pushButton_moderators.setStyleSheet("background-color: #139E74;\n"
"border:1px solid #139E74;\n"
"color:white;")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("./user (2).png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButton_moderators.setIcon(icon4)
        self.pushButton_moderators.setIconSize(QtCore.QSize(20, 20))
        self.pushButton_moderators.setObjectName("pushButton_moderators")
        self.pushButton_sources = QtWidgets.QPushButton(parent=self.page_2)
        self.pushButton_sources.setGeometry(QtCore.QRect(20, 330, 121, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(13)
        font.setBold(True)
        self.pushButton_sources.setFont(font)
        self.pushButton_sources.setStyleSheet("background-color: #139E74;\n"
"border:1px solid #139E74;\n"
"color:white;")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("./wave.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButton_sources.setIcon(icon5)
        self.pushButton_sources.setIconSize(QtCore.QSize(20, 20))
        self.pushButton_sources.setObjectName("pushButton_sources")
        self.pushButton_2 = QtWidgets.QPushButton(parent=self.page_2)
        self.pushButton_2.setGeometry(QtCore.QRect(30, 390, 121, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(13)
        font.setBold(True)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("background-color: #139E74;\n"
"border:1px solid #139E74;\n"
"color:white;")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("./layout.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButton_2.setIcon(icon6)
        self.pushButton_2.setIconSize(QtCore.QSize(20, 20))
        self.pushButton_2.setObjectName("pushButton_2")
        self.mainStackedWidget.addWidget(self.page_2)
        self.page_7 = QtWidgets.QWidget()
        self.page_7.setObjectName("page_7")
        self.label_9 = QtWidgets.QLabel(parent=self.page_7)
        self.label_9.setGeometry(QtCore.QRect(10, 10, 1081, 651))
        self.label_9.setStyleSheet("background-color: rgb(255, 250, 250);")
        self.label_9.setText("")
        self.label_9.setObjectName("label_9")
        self.label_32 = QtWidgets.QLabel(parent=self.page_7)
        self.label_32.setGeometry(QtCore.QRect(10, 0, 1081, 101))
        self.label_32.setStyleSheet("background-color: rgb(19, 158, 116);\n"
"")
        self.label_32.setText("")
        self.label_32.setObjectName("label_32")
        self.label_37 = QtWidgets.QLabel(parent=self.page_7)
        self.label_37.setGeometry(QtCore.QRect(490, 20, 81, 81))
        self.label_37.setText("")
        self.label_37.setPixmap(QtGui.QPixmap("./user (1).png"))
        self.label_37.setScaledContents(True)
        self.label_37.setObjectName("label_37")
        self.label_34 = QtWidgets.QLabel(parent=self.page_7)
        self.label_34.setGeometry(QtCore.QRect(948, 20, 111, 81))
        self.label_34.setText("")
        self.label_34.setPixmap(QtGui.QPixmap("./color_logo.png"))
        self.label_34.setScaledContents(True)
        self.label_34.setObjectName("label_34")
        self.label_36 = QtWidgets.QLabel(parent=self.page_7)
        self.label_36.setGeometry(QtCore.QRect(110, 130, 211, 41))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(11)
        font.setBold(True)
        self.label_36.setFont(font)
        self.label_36.setStyleSheet("background-color:#139E74;\n"
"border-radius:15px;\n"
"color:white;")
        self.label_36.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_36.setObjectName("label_36")
        self.listView_watersources = QtWidgets.QListWidget(parent=self.page_7)
        self.listView_watersources.setGeometry(QtCore.QRect(20, 190, 351, 401))
        self.listView_watersources.setSpacing(5) 
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(12)
        font.setBold(True)
        self.listView_watersources.setFont(font)
        self.listView_watersources.setStyleSheet("background-color:white;\n"
"border-radius:15px;")
        self.listView_watersources.setObjectName("listView_watersources")
        self.label_39 = QtWidgets.QLabel(parent=self.page_7)
        self.label_39.setGeometry(QtCore.QRect(830, 130, 211, 41))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(11)
        font.setBold(True)
        self.label_39.setFont(font)
        self.label_39.setStyleSheet("background-color:#139E74;\n"
"border-radius:15px;\n"
"color:white;")
        self.label_39.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_39.setObjectName("label_39")
        self.listView_complains = QtWidgets.QListWidget(parent=self.page_7)
        self.listView_complains.setGeometry(QtCore.QRect(720, 190, 351, 401))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(12)
        font.setBold(True)
        self.listView_complains.setFont(font)
        self.listView_complains.setStyleSheet("background-color:white;\n"
"border-radius:15px;")
        self.listView_complains.setObjectName("listView_complains")
        self.label_conditions = QtWidgets.QLabel(parent=self.page_7)
        self.label_conditions.setGeometry(QtCore.QRect(400, 190, 291, 261))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(12)
        self.label_conditions.setFont(font)
        self.label_conditions.setStyleSheet("background-color:white;\n"
"border-radius:15px;")
        self.label_conditions.setText("")
        self.label_conditions.setObjectName("label_conditions")
        self.label_41 = QtWidgets.QLabel(parent=self.page_7)
        self.label_41.setGeometry(QtCore.QRect(410, 130, 281, 41))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(11)
        font.setBold(True)
        self.label_41.setFont(font)
        self.label_41.setStyleSheet("background-color:#139E74;\n"
"border-radius:15px;\n"
"color:white;")
        self.label_41.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_41.setObjectName("label_41")
        self.lineEdit_warningEmails = QtWidgets.QLineEdit(parent=self.page_7)
        self.lineEdit_warningEmails.setGeometry(QtCore.QRect(20, 620, 991, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(12)
        self.lineEdit_warningEmails.setFont(font)
        self.lineEdit_warningEmails.setStyleSheet("border:1px solid white;\n"
"border-radius:15px;\n"
"color:grey;")
        self.lineEdit_warningEmails.setObjectName("lineEdit_warningEmails")
        self.pushButton_sendEmails = QtWidgets.QPushButton(parent=self.page_7)
        self.pushButton_sendEmails.setGeometry(QtCore.QRect(1020, 620, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(10)
        font.setBold(True)
        self.pushButton_sendEmails.setFont(font)
        self.pushButton_sendEmails.setStyleSheet("background-color:rgb(255, 250, 250);\n"
"border-radius:15px;\n"
"color:white;")
        self.pushButton_sendEmails.setText("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("./send.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButton_sendEmails.setIcon(icon7)
        self.pushButton_sendEmails.setIconSize(QtCore.QSize(30, 30))
        self.pushButton_sendEmails.setObjectName("pushButton_sendEmails")
        self.pushButton_exportTables = QtWidgets.QPushButton(parent=self.page_7)
        self.pushButton_exportTables.setGeometry(QtCore.QRect(490, 510, 121, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(10)
        font.setBold(True)
        self.pushButton_exportTables.setFont(font)
        self.pushButton_exportTables.setStyleSheet("background-color:#139E74;\n"
"border-radius:15px;\n"
"color:white;")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("./upload.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButton_exportTables.setIcon(icon8)
        self.pushButton_exportTables.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_exportTables.setObjectName("pushButton_exportTables")
        self.label_40 = QtWidgets.QLabel(parent=self.page_7)
        self.label_40.setGeometry(QtCore.QRect(280, 140, 31, 31))
        self.label_40.setText("")
        self.label_40.setPixmap(QtGui.QPixmap("./save-water.png"))
        self.label_40.setScaledContents(True)
        self.label_40.setObjectName("label_40")
        self.label_42 = QtWidgets.QLabel(parent=self.page_7)
        self.label_42.setGeometry(QtCore.QRect(650, 140, 31, 31))
        self.label_42.setText("")
        self.label_42.setPixmap(QtGui.QPixmap("./terms-and-conditions.png"))
        self.label_42.setScaledContents(True)
        self.label_42.setObjectName("label_42")
        self.label_43 = QtWidgets.QLabel(parent=self.page_7)
        self.label_43.setGeometry(QtCore.QRect(990, 130, 31, 31))
        self.label_43.setText("")
        self.label_43.setPixmap(QtGui.QPixmap("./bad-review.png"))
        self.label_43.setScaledContents(True)
        self.label_43.setObjectName("label_43")
        self.mainStackedWidget.addWidget(self.page_7)
        self.page_8 = QtWidgets.QWidget()
        self.page_8.setObjectName("page_8")
        self.label_38 = QtWidgets.QLabel(parent=self.page_8)
        self.label_38.setGeometry(QtCore.QRect(10, 10, 1071, 651))
        self.label_38.setStyleSheet("background-color:rgb(255, 250, 250);")
        self.label_38.setText("")
        self.label_38.setObjectName("label_38")
        self.tableWidget_watersources = QtWidgets.QTableWidget(parent=self.page_8)
        self.tableWidget_watersources.setGeometry(QtCore.QRect(25, 121, 1051, 531))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(15)
        self.tableWidget_watersources.setFont(font)
        self.tableWidget_watersources.setStyleSheet("background-color:rgb(255, 250, 250);\n"
"border:2px solid white;\n"
"border-radius:15px;")
        self.tableWidget_watersources.setObjectName("tableWidget_watersources")
        self.tableWidget_watersources.setColumnCount(0)
        self.tableWidget_watersources.setRowCount(0)
        self.label_44 = QtWidgets.QLabel(parent=self.page_8)
        self.label_44.setGeometry(QtCore.QRect(20, 20, 1051, 91))
        self.label_44.setStyleSheet("background-color: rgb(19, 158, 116);\n"
"border-radius:10px;")
        self.label_44.setText("")
        self.label_44.setObjectName("label_44")
        self.label_45 = QtWidgets.QLabel(parent=self.page_8)
        self.label_45.setGeometry(QtCore.QRect(440, 20, 161, 91))
        self.label_45.setText("")
        self.label_45.setPixmap(QtGui.QPixmap("./color_logo.png"))
        self.label_45.setScaledContents(True)
        self.label_45.setObjectName("label_45")
        self.mainStackedWidget.addWidget(self.page_8)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.mainStackedWidget.setCurrentIndex(0)
        self.AdminstackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        ##################CONNECTING BUTTONS TO FUNCTIONS###################
        self.label_34.mousePressEvent = self.goto_main
        self.label_20.mousePressEvent = self.goto_main
        self.label_45.mousePressEvent = self.goto_main
        self.pushButton_login.clicked.connect(self.authenticate_and_set_index)
        self.pushButton.clicked.connect(self.goto_users)
        self.pushButton_moderators.clicked.connect(self.goto_moderators)
        self.pushButton_2.clicked.connect(self.goto_dashboard)
        self.pushButton_sources.clicked.connect(self.goto_sources)
        self.pushButton_addUsers.clicked.connect(self.register_user)
        self.pushButton_deleteUsers.clicked.connect(self.delete_user_credits)
        self.pushButton_updateUsers.clicked.connect(self.update_user_info)
        self.pushButton_addSources.clicked.connect(self.add_source_to_table)
        self.pushButton_deleteSource.clicked.connect(self.delete_sources)
        self.pushButton_sendEmails.clicked.connect(self.send_emails)
        self.pushButton_exportTables.clicked.connect(self.export_to_excel)
        self.pushButton_saveCondition.clicked.connect(self.update_conditions_in_database)
        
        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.lineEdit_userId.setPlaceholderText(_translate("MainWindow", "UserID"))
        self.lineEdit_password.setPlaceholderText(_translate("MainWindow", "Password"))
        self.pushButton_login.setText(_translate("MainWindow", "Login"))
        self.label_4.setText(_translate("MainWindow", "© Niguel BIGOUAWE"))
        self.label_6.setText(_translate("MainWindow", "WELCOME !"))
        self.label_section.setText(_translate("MainWindow", "Dashboard"))
        self.label_numberOfModerators.setText(_translate("MainWindow", "0"))
        self.label_16.setText(_translate("MainWindow", "Moderators :"))
        self.label_18.setText(_translate("MainWindow", "Sources :"))
        self.label_17.setText(_translate("MainWindow", "Localities :"))
        self.label_15.setText(_translate("MainWindow", "Users :"))
        self.label_numberOfUsers.setText(_translate("MainWindow", "0"))
        self.label_numberOfLocalities.setText(_translate("MainWindow", "0"))
        self.label_numberOfSources.setText(_translate("MainWindow", "0"))
        self.lineEdit_userid_add.setPlaceholderText(_translate("MainWindow", "User id"))
        self.lineEdit_userEmail_add.setPlaceholderText(_translate("MainWindow", "Email"))
        self.lineEdit_password_add.setPlaceholderText(_translate("MainWindow", "Password"))
        self.pushButton_addUsers.setText(_translate("MainWindow", "Add"))
        self.lineEdit_userid_delete.setPlaceholderText(_translate("MainWindow", "User Id"))
        self.lineEdit_userid_update.setPlaceholderText(_translate("MainWindow", "User id"))
        self.lineEdit_userEmail_update.setPlaceholderText(_translate("MainWindow", "Email"))
        self.lineEdit_password_update.setPlaceholderText(_translate("MainWindow", "Password"))
        self.pushButton_deleteUsers.setText(_translate("MainWindow", "Delete"))
        self.pushButton_updateUsers.setText(_translate("MainWindow", "Update"))
        self.lineEdit_moderatorName.setPlaceholderText(_translate("MainWindow", "Moderator Name"))
        self.lineEdit_sourceCode.setPlaceholderText(_translate("MainWindow", "Source code"))
        self.pushButton_addModerator.setText(_translate("MainWindow", "Add"))
        self.label_29.setText(_translate("MainWindow", "Source code list"))
        self.pushButton_deleteModerator.setText(_translate("MainWindow", "Delete"))
        self.lineEdit_sourceName.setPlaceholderText(_translate("MainWindow", "source name"))
        self.lineEdit_sourceCode_2.setPlaceholderText(_translate("MainWindow", "source code"))
        self.lineEdit_sourceCode_3.setPlaceholderText(_translate("MainWindow", "Locality"))
        self.pushButton_addSources.setText(_translate("MainWindow", "Add"))
        self.pushButton_deleteSource.setText(_translate("MainWindow", "Delete"))
        self.pushButton.setText(_translate("MainWindow", "Users"))
        self.pushButton_moderators.setText(_translate("MainWindow", "Moderators"))
        self.pushButton_sources.setText(_translate("MainWindow", "Sources"))
        self.pushButton_2.setText(_translate("MainWindow", "Dashboard"))
        self.label_36.setText(_translate("MainWindow", "Water sources"))
        self.label_39.setText(_translate("MainWindow", "Complains"))
        self.label_41.setText(_translate("MainWindow", "Water sources conditions"))
        self.lineEdit_warningEmails.setPlaceholderText(_translate("MainWindow", "enter your text here....."))
        self.pushButton_exportTables.setText(_translate("MainWindow", "Export Tables"))
        self.lineEdit_password.setEchoMode(PyQt6.QtWidgets.QLineEdit.EchoMode.Password)
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_time_label)
        self.timer.start(1000)
        self.update_month_label()
        self.update_day_label()
        self.update_year_label()
        self.create_charts()
        self.fetch_database_statistics()
        self.fetch_and_display_counts()
        self.fetch_and_display_sources()
        self.add_conditions_widgets()
        self.fill_table_with_data()
        self.populate_complaints_list()
        # Display source codes in QListWidget
        source_codes = self.get_source_codes()
        for index, source_code in enumerate(source_codes, start=1):
            self.listView.addItem(f"{index}. {source_code}")

############FUNCTIONS############################
        
    def register_user(self):
        USERIDADD = self.lineEdit_userid_add.text()
        USEREMAIL = self.lineEdit_userEmail_add.text()
        USERPASSWORD = self.lineEdit_password_add.text()

        # Check if USERIDADD already exists
        if self.user_exists(USERIDADD):
            self.show_message("USER ID already exists")
            return

        # Check USERIDADD format
        if not self.check_userid_format(USERIDADD):
            self.show_message("Invalid USER ID format")
            return

        # Check EMAIL format
        try:
            validate_email(USEREMAIL)
        except EmailNotValidError as e:
            self.show_message(f"Invalid EMAIL format: {str(e)}")
            return

        # Check PASSWORD strength
        if not self.check_password_strength(USERPASSWORD):
            self.show_message("Enter a stronger PASSWORD")
            return

        # If all conditions are satisfied, store data in the database
        if self.table_exists("credits"):
            self.store_data(USERIDADD, USEREMAIL, USERPASSWORD)
            self.show_message("Successfully added")
        else:
            self.show_message("Table 'credits' does not exist in the database.")

    def user_exists(self, user_id):
        # check if USERIDADD already exists in the database
        try:
            conn = sqlite3.connect("./Water_sources.db")
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM credits WHERE User_ID = ?", (user_id,))
            count = cursor.fetchone()[0]
            conn.close()
            return count > 0
        except sqlite3.Error as e:
            print("Error checking user existence:", str(e))
            return False

    def check_userid_format(self, user_id):
        # check if the first three characters of USERIDADD contain MOD, ADM, or USE
        return user_id[:3] in ["MOD", "ADM", "USE"]

    def check_password_strength(self, password):
        # logic to check if USERPASSWORD has more than 6 characters and contains
        # a number, special character, lowercase letter, and uppercase letter
        return len(password) > 6 and any(c.isdigit() for c in password) and \
               any(c.isalpha() and c.islower() for c in password) and \
               any(c.isalpha() and c.isupper() for c in password) and \
               any(c for c in password if c in "!@#$%^&*()_-+=<>?/")

    def table_exists(self, table_name):
        # Check if the table exists in the database
        try:
            conn = sqlite3.connect("./Water_sources.db")
            cursor = conn.cursor()
            cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name=?;", (table_name,))
            result = cursor.fetchone()
            conn.close()
            return result is not None
        except sqlite3.Error as e:
            print("Error checking table existence:", str(e))
            return False

    def store_data(self, user_id, email, password):
        
        try:
            conn = sqlite3.connect("./Water_sources.db")
            cursor = conn.cursor()
            cursor.execute("INSERT INTO credits (User_ID, Email, Password) VALUES (?, ?, ?)", (user_id, email, password))
            conn.commit()
            conn.close()
        except sqlite3.Error as e:
            print("Error storing data:", str(e))


    def delete_user_credits(self):########DELETE A USER FROM THE DATABASE
        user_id_to_delete = self.lineEdit_userid_delete.text()

        if not user_id_to_delete:
            self.show_message("Please enter a User ID for deletion.")
            return

        # Confirm deletion with the user
        confirmation = QMessageBox.question(None,"Confirmation", f"Do you want to delete credits for User ID {user_id_to_delete}?",
                                             QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)

        if confirmation == QMessageBox.StandardButton.No:
            return

        # Delete user credits
        if self.delete_credits(user_id_to_delete):
            self.show_message(f"Successfully deleted credits for User ID {user_id_to_delete}")
        else:
            self.show_message(f"User ID {user_id_to_delete} not found in the 'credits' table.")

    def delete_credits(self, user_id):
        try:
            conn = sqlite3.connect("./Water_sources.db")
            cursor = conn.cursor()

            # Check if the User_ID exists in the 'credits' table
            cursor.execute("SELECT COUNT(*) FROM credits WHERE User_ID = ?", (user_id,))
            count = cursor.fetchone()[0]

            if count == 0:
                conn.close()
                return False  # User not found in the 'credits' table

            # Delete user credits
            cursor.execute("DELETE FROM credits WHERE User_ID = ?", (user_id,))
            conn.commit()
            conn.close()

            return True  # Successfully deleted user credits
        except sqlite3.Error as e:
            print("Error deleting user credits:", str(e))
            return False


    def show_message(self, message):
        msg_box = QMessageBox()
        msg_box.setText(message)
        msg_box.exec()

    def update_user_info(self):#############update the user's informations
        # Get input values
        user_id = self.lineEdit_userid_update.text()
        email = self.lineEdit_userEmail_update.text()
        password = self.lineEdit_password_update.text()

        # Validate input
        if not user_id or not email or not password:
            self.show_message_2("Please fill in all fields.", QMessageBox.Icon.Critical)
            return

        # Connect to the database
        conn = sqlite3.connect("./Water_sources.db")
        cursor = conn.cursor()

        try:
            # Check if user_id exists
            cursor.execute("SELECT COUNT(*) FROM credits WHERE User_ID = ?", (user_id,))
            count = cursor.fetchone()[0]

            if count == 0:
                self.show_message_2("User ID not found.", QMessageBox.Icon.Critical)
                return

            # Update user information
            cursor.execute("UPDATE credits SET Email = ?, Password = ? WHERE User_ID = ?", (email, password, user_id))
            conn.commit()

            # Show success message
            self.show_message_2("User information updated successfully.", QMessageBox.Icon.Information)

        except Exception as e:
            self.show_message_2(f"Error updating user information: {str(e)}", QMessageBox.Icon.Critical)

        finally:
            # Close the database connection
            conn.close()

    def add_source_to_table(self):
        try:
                # Get input values
                source_name = self.lineEdit_sourceName.text()
                source_code2 = self.lineEdit_sourceCode_2.text()
                source_code3 = self.lineEdit_sourceCode_3.text()

                # Validate input
                if not source_name or not source_code2 or not source_code3:
                        self.show_message_2("Please fill in all fields.", QMessageBox.Icon.Critical)
                        return

                 # Connect to the database
                conn = sqlite3.connect("./Water_sources.db")
                cursor = conn.cursor()

                try:
                        # Check if source_code already exists in the table
                        cursor.execute("SELECT COUNT(*) FROM sources WHERE source_code = ?", (source_code2,))
                        count = cursor.fetchone()[0]

                        if count > 0:
                                self.show_message_2("Source code already exists in the table.", QMessageBox.Icon.Critical)
                                return

                        # Insert data into the table
                        cursor.execute("INSERT INTO sources (source_name, source_code, locality) VALUES (?, ?, ?)",
                           (source_name, source_code2, source_code3))
                        conn.commit()

                        # Show success message
                        self.show_message_2("Data added to the table successfully.", QMessageBox.Icon.Information)

                except Exception as e:
                        self.show_message_2(f"Error adding data to the table: {str(e)}", QMessageBox.Icon.Critical)

                finally:
                        # Close the database connection
                        conn.close()

        except Exception as e:
                self.show_message_2(f"An unexpected error occurred: {str(e)}", QMessageBox.Icon.Critical)

    
    def delete_sources(self):########DELETE sources FROM THE DATABASE
        source_id_to_delete = self.lineEdit_sourceCode_2.text()

        if not source_id_to_delete:
            self.show_message("Please enter a source code for deletion.")
            return

        # Confirm deletion with the user
        confirmation = QMessageBox.question(None,"Confirmation", f"Do you want to delete this source {source_id_to_delete}?",
                                             QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)

        if confirmation == QMessageBox.StandardButton.No:
            return

        # Delete user credits
        if self.delete_source_code(source_id_to_delete):
            self.show_message(f"Successfully deleted the source")
        else:
            self.show_message(f"Source_code {source_id_to_delete} not found in the 'Sources' table.")

    def delete_source_code(self, source_code):
        try:
            conn = sqlite3.connect("./Water_sources.db")
            cursor = conn.cursor()

            # Check if the User_ID exists in the 'source' table
            cursor.execute("SELECT COUNT(*) FROM sources WHERE source_code = ?", (source_code,))
            count = cursor.fetchone()[0]

            if count == 0:
                conn.close()
                return False  # User not found in the 'source' table

            # Delete sources code
            cursor.execute("DELETE FROM sources WHERE source_code = ?", (source_code,))
            conn.commit()
            conn.close()

            return True  # Successfully deleted source
        except sqlite3.Error as e:
            print("Error deleting sourcecode:", str(e))
            return False

    def show_message_2(self, message, icon):
        msg_box = QMessageBox()
        msg_box.setIcon(icon)
        msg_box.setText(message)
        msg_box.setWindowTitle("Information")
        msg_box.exec()


    def get_source_codes(self):
        try:
                # Connect to the database
                conn = sqlite3.connect("./Water_sources.db")
                cursor = conn.cursor()

                # Retrieve source codes from the 'sources' table
                cursor.execute("SELECT source_code FROM sources")
                source_codes = [record[0] for record in cursor.fetchall()]

                # Close the connection
                conn.close()

                return source_codes
        except sqlite3.Error as e:
                print("Error fetching source codes:", str(e))
                return []

  


        
    
    def update_month_label(self):
        # Set the QLabel with the current month
        current_month = QDate.currentDate().toString("MMMM")
        self.label_month.setText(f"{current_month}")
        self.label_month.setAlignment(Qt.AlignmentFlag.AlignCenter)

    def update_day_label(self):
        # Set the QLabel with the current day
        current_day = QDate.currentDate().toString("dddd d")
        self.label_day.setText(f"{current_day}")
        self.label_day.setAlignment(Qt.AlignmentFlag.AlignCenter)

    def update_year_label(self):
        # Set the QLabel with the current year
        current_year = QDate.currentDate().year()
        self.label_year.setText(f"{current_year}")
        self.label_year.setAlignment(Qt.AlignmentFlag.AlignCenter)

    def update_time_label(self):
        # Set the QLabel with the current time
        current_time = QTime.currentTime().toString("hh:mm:ss")
        self.label_time.setText(f"{current_time}")
        self.label_time.setAlignment(Qt.AlignmentFlag.AlignCenter)


    def goto_users(self):
           self.AdminstackedWidget.setCurrentIndex(1)
           self.label_section.setText('Users')
    def goto_main(self, event):
           self.mainStackedWidget.setCurrentIndex(0)
    def goto_dashboard(self):
           self.AdminstackedWidget.setCurrentIndex(0)
           self.label_section.setText('Dashboard')
    def goto_moderators(self):
           self.AdminstackedWidget.setCurrentIndex(2)
           self.label_section.setText('Moderators')
    def goto_sources(self):
           self.AdminstackedWidget.setCurrentIndex(3)
           self.label_section.setText('Sources')

    def authenticate_and_set_index(self):###############AUTHENTICATION
        USERID = self.lineEdit_userId.text()

        # Establish a database connection
        try:
                connection = sqlite3.connect('./Water_sources.db')
                cursor = connection.cursor()

                # Search for the USERID in the database
                cursor.execute("SELECT * FROM credits WHERE User_ID = ?", (USERID,))
                result = cursor.fetchone()

                if result is None:
                        # User not found, update lineEdit_userId placeholder and color
                        
                        self.lineEdit_userId.setPlaceholderText('Enter a valid User ID')
                        self.lineEdit_userId.setStyleSheet("color: red; border-radius:18px;")

                else:
                        PASSWORD = self.lineEdit_password.text()

                        if USERID[:3] == 'ADM':
                                # Admin user, check Password for USERID
                                cursor.execute("SELECT * FROM credits WHERE User_ID = ? AND Password = ?", (USERID, PASSWORD))
                                if cursor.fetchone():
                                        # Password match, update StackedWidgets
                                        self.mainStackedWidget.setCurrentIndex(1)
                                        self.AdminstackedWidget.setCurrentIndex(0)
                                else:
                                        # Password doesn't match, update lineEdit_password placeholder and color
                                        self.lineEdit_password.setPlaceholderText('Enter a valid password')
                                        self.lineEdit_password.setStyleSheet("color: red; border-radius:18px;")

                        elif USERID[:3] == 'USE':
                                # User user, check Password for USERID
                                cursor.execute("SELECT * FROM credits WHERE User_ID = ? AND Password = ?", (USERID, PASSWORD))
                                if cursor.fetchone():
                                        # Password match, update StackedWidgets
                                        self.mainStackedWidget.setCurrentIndex(3)
                                else:
                                        # Password doesn't match, update lineEdit_password placeholder and color
                                        self.lineEdit_password.setPlaceholderText('Enter a valid password')
                                        self.lineEdit_password.setStyleSheet("color: red; border-radius:18px;")

                        elif USERID[:3] == 'MOD':
                                # Moderator user, check Password for USERID
                                cursor.execute("SELECT * FROM credits WHERE User_ID = ? AND Password = ?", (USERID, PASSWORD))
                                if cursor.fetchone():
                                        # Password match, update StackedWidgets
                                        self.mainStackedWidget.setCurrentIndex(2)
                                else:
                                        # Password doesn't match, update lineEdit_password placeholder and color
                                        self.lineEdit_password.setPlaceholderText('Enter a valid password')
                                        self.lineEdit_password.setStyleSheet("color: red; border-radius:18px;")

        except sqlite3.Error as e:
                print(f"SQLite error: {e}")

        finally:
                # Close the database connection
                connection.close()


    def fetch_data_from_database(self):
        conn = sqlite3.connect('./Water_sources.db')
        cursor = conn.cursor()
        cursor.execute('SELECT locality, COUNT(source_name) FROM sources GROUP BY locality')
        data = cursor.fetchall()
        conn.close()
        return data


    def create_bar_chart(self, data):
        localities = [row[0] for row in data]
        num_sources = [row[1] for row in data]

        fig, ax = plt.subplots(figsize=(8, 6))
        ax.bar(localities, num_sources, color='skyblue')
        ax.set_xlabel('Locality')
        ax.set_ylabel('Number of Water Sources')
        ax.set_title('Number of Water Sources by Locality')
        ax.tick_params(axis='x', rotation=45)
        fig.tight_layout()

        # Save the figure
        self.bar_canvas = FigureCanvas(fig)
    
        # Set the pixmap directly
        self.label_barchart.setPixmap(self.bar_canvas.grab())

    def create_pie_chart(self, data):
        localities = [row[0] for row in data]
        num_sources = [row[1] for row in data]

        fig, ax = plt.subplots(figsize=(8, 8))
        ax.pie(num_sources, labels=localities, autopct='%1.1f%%', colors=plt.cm.tab20.colors)
        ax.set_title('Distribution of Water Sources by Locality')
        fig.tight_layout()

        # Save the figure
        self.pie_canvas = FigureCanvas(fig)
    
        # Set the pixmap directly
        self.label_piechart.setPixmap(self.pie_canvas.grab())

    def create_charts(self):
        self.data = self.fetch_data_from_database()
        self.create_bar_chart(self.data)
        self.create_pie_chart(self.data)

    def fetch_database_statistics(self):
        try:
                # Connect to the database
                conn = sqlite3.connect('./Water_sources.db')
                cursor = conn.cursor()

                # Count records starting with 'MOD' in the User_ID field
                cursor.execute("SELECT COUNT(*) FROM credits WHERE User_ID LIKE 'MOD%'")
                num_moderators = cursor.fetchone()[0]

                # Count records starting with 'USE' in the User_ID field
                cursor.execute("SELECT COUNT(*) FROM credits WHERE User_ID LIKE 'USE%'")
                num_users = cursor.fetchone()[0]

                # Close the database connection
                conn.close()

                # Display the counts on the labels
                self.label_numberOfModerators.setText(f"{num_moderators}")
                self.label_numberOfUsers.setText(f"{num_users}")

        except sqlite3.Error as e:
                print("SQLite error:", e)
                self.label_numberOfModerators.setText("Error fetching data")
                self.label_numberOfUsers.setText("Error fetching data")
        except Exception as e:
                print("Error:", e)
                self.label_numberOfModerators.setText("Error fetching data")
                self.label_numberOfUsers.setText("Error fetching data")

    def fetch_and_display_counts(self):
        try:
                # Connect to the database
                conn = sqlite3.connect('./Water_sources.db')
                cursor = conn.cursor()

                # Count the number of values in the source_code field
                cursor.execute("SELECT COUNT(source_code) FROM sources")
                num_sources = cursor.fetchone()[0]

                # Count the number of unique values in the locality field
                cursor.execute("SELECT COUNT(DISTINCT locality) FROM sources")
                num_localities = cursor.fetchone()[0]

                # Close the database connection
                conn.close()

                # Display the counts on the labels
                self.label_numberOfSources.setText(f"{num_sources}")
                self.label_numberOfLocalities.setText(f"{num_localities}")

        except sqlite3.Error as e:
                print("SQLite error:", e)
                self.label_numberOfSources.setText("Error fetching data")
                self.label_numberOfLocalities.setText("Error fetching data")
        except Exception as e:
                print("Error:", e)
                self.label_numberOfSources.setText("Error fetching data")
                self.label_numberOfLocalities.setText("Error fetching data")

    def fetch_and_display_sources(self):
        try:
                # Clear existing items in the list widget
                self.listView_watersources.clear()

                # Connect to the database
                conn = sqlite3.connect('./Water_sources.db')
                cursor = conn.cursor()

                # Retrieve values from the fields source_name, source_code, and locality
                cursor.execute("SELECT source_name, source_code, locality FROM sources")
                sources_data = cursor.fetchall()

                # Close the database connection
                conn.close()

                # Display the values as items in the list widget
                for source_name, source_code, locality in sources_data:
                        item_text = f"Name :{source_name}\nCode:{source_code}\nLocality:{locality}"
                        list_item = QListWidgetItem(item_text)
                        self.listView_watersources.addItem(list_item)

        except sqlite3.Error as e:
                print("SQLite error:", e)
                self.listView_watersources.addItem("Error fetching data")
        except Exception as e:
                print("Error:", e)
                self.listView_watersources.addItem("Error fetching data")

    def send_emails(self):
        warning_emails = self.lineEdit_warningEmails.text()

        # Connect to the database
        try:
            conn = sqlite3.connect ('./Water_sources.db')
            cursor = conn.cursor()

            # Access the table credits
            cursor.execute("SELECT Email FROM credits")
            emails = cursor.fetchall()

            # Send emails
            for email in emails:
                self.send_email(email[0], warning_emails)

            conn.close()
        except sqlite3.Error as e:
            print("SQLite error:", e)

    def send_email(self, recipient, warning_message):
        sender_email = "bigouawe.clark@ictuniversity.edu.cm"
        password = "bhcy pzmf lubv gpxc"

        message = MIMEMultipart()
        message['From'] = sender_email
        message['To'] = recipient
        message['Subject'] = "---------------WARNING💥💥‼-----------------"

        message.attach(MIMEText(warning_message, 'plain'))

        try:
            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.starttls()
            server.login(sender_email, password)
            server.sendmail(sender_email, recipient, message.as_string())
            server.quit()
            print("Email sent successfully to:", recipient)
        except Exception as e:
            print("Error sending email to", recipient, ":", e)


    def export_to_excel(self):
        db_path = "./Water_sources.db"
        excel_path = "Water_sources.xlsx"

        try:
            # Connect to the SQLite database
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()

            # Retrieve data from the sources table
            cursor.execute("SELECT * FROM sources")
            rows = cursor.fetchall()

            # Convert data to DataFrame
            columns = [description[0] for description in cursor.description]
            df = pd.DataFrame(rows, columns=columns)

            # Save DataFrame to Excel
            df.to_excel(excel_path, index=False)
            print("Exported data to Excel successfully!")

        except sqlite3.Error as e:
            print(f"SQLite error: {e}")
        except Exception as e:
            print(f"Error: {e}")

        finally:
            if conn:
                conn.close()

    def add_conditions_widgets(self):
        # Create Line Edits for conditions
        self.lineEdit_conditions = QLineEdit(self.label_conditions)
        self.lineEdit_conditions.setGeometry(QtCore.QRect(40, 350, 221, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(15)
        font.setBold(True)
        self.lineEdit_conditions.setFont(font)
        self.lineEdit_conditions.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-bottom: 1px solid grey;\n"
"border-radius:0px;\n"
"color:grey;")
        self.lineEdit_conditions.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_conditions.setPlaceholderText('conditions here....')

        # Create Line Edits for source code
        self.lineEdit_sourceCode_conditions = QLineEdit(self.label_conditions)
        self.lineEdit_sourceCode_conditions.setGeometry(QtCore.QRect(40, 350, 221, 31))
        self.font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(15)
        font.setBold(True)
        self.lineEdit_sourceCode_conditions.setFont(font)
        self.lineEdit_sourceCode_conditions.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-bottom: 1px solid grey;\n"
"border-radius:0px;\n"
"color:grey;")
        self.lineEdit_sourceCode_conditions.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_sourceCode_conditions.setPlaceholderText('source code here....')


        # Create Push Button
        self.pushButton_saveCondition = QPushButton(self.label_conditions)
        self.pushButton_saveCondition.setGeometry(QtCore.QRect(480, 420, 300, 200))
        self.pushButton_saveCondition.setText("Save")
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(12)
        self.pushButton_saveCondition .setFont(font)
        self.pushButton_saveCondition .setStyleSheet("background-color: #FFB7B1;\n"
"border-radius:5px;")
        icon20 = QtGui.QIcon()
        icon20.addPixmap(QtGui.QPixmap("./add.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButton_saveCondition.setIcon(icon20)
        ###button connections

        # Layout for Line Edit and Push Button
        self.layout_conditions = QVBoxLayout()
        self.layout_conditions.addWidget(self.lineEdit_conditions)
        self.layout_conditions.addWidget(self.lineEdit_sourceCode_conditions)
        self.layout_conditions.addWidget(self.pushButton_saveCondition)
        

        # Set the layout for the QLabel
        self.label_conditions.setLayout(self.layout_conditions)

        # Return both widgets
        return self.lineEdit_conditions, self.pushButton_saveCondition
    
    def update_conditions_in_database(self):

        try:
                # Connect to the SQLite database
                conn = sqlite3.connect(r'./Water_sources.db')
                cursor = conn.cursor()

                # Retrieve the values from the line edits
                source_code = self.lineEdit_sourceCode_conditions.text()
                conditions = self.lineEdit_conditions.text()

                # Update the 'conditions' field in the 'sources' table
                cursor.execute("UPDATE sources SET conditions = ? WHERE source_code = ?", (conditions, source_code))
        
                # Commit the changes
                conn.commit()

                # Close the connection
                conn.close()

                QMessageBox.information(None, "Success", "Conditions updated successfully.")
        except Exception as e:
                QMessageBox.critical(None, "Error", f"An error occurred: {str(e)}")



    def fill_table_with_data(self):
        try:
            # Connect to the SQLite database
            conn = sqlite3.connect(r'./Water_sources.db')
            cursor = conn.cursor()

            # Access the 'sources' table and retrieve data
            cursor.execute("SELECT source_code, locality, conditions FROM sources")
            data = cursor.fetchall()

            # Set up the table columns
            self.tableWidget_watersources.setColumnCount(4)
            self.tableWidget_watersources.setStyleSheet("QTableWidget { border: 2px solid white; }")
            self.tableWidget_watersources.setHorizontalHeaderLabels(["Source Code", "Locality", "Conditions", "Complaints"])

            # Set table to fit contents and disable editing
            self.tableWidget_watersources.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)
            self.tableWidget_watersources.setSizeAdjustPolicy(QTableWidget.SizeAdjustPolicy.AdjustToContents)
            self.tableWidget_watersources.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)

            # Fill the table with data
            for row_num, row_data in enumerate(data):
                self.tableWidget_watersources.insertRow(row_num)
                for col_num, col_data in enumerate(row_data):
                    item = QTableWidgetItem(str(col_data))
                    self.tableWidget_watersources.setItem(row_num, col_num, item)

                # Add a push button in the 'Complaints' column
                button = QPushButton("Add Complaint")
                button.clicked.connect(lambda _, row=row_data[0]: self.open_complaint_dialog(row))
                self.tableWidget_watersources.setCellWidget(row_num, 3, button)

            # Close the connection
            conn.close()

        except Exception as e:
            QMessageBox.critical(None, "Error", f"An error occurred: {str(e)}")

    def open_complaint_dialog(self, source_code):
        self.dialog = QDialog()
        self.dialog.setWindowTitle("Add Complaint")

        self.layout = QVBoxLayout()
        self.dialog.setLayout(self.layout)

        self.label = QLabel("Enter your complaint:")
        self.layout.addWidget(self.label)

        self.line_edit = QLineEdit()
        self.layout.addWidget(self.line_edit)

        buttons = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        buttons.accepted.connect(lambda: self.save_complaint(source_code, self.line_edit.text(), self.dialog))
        buttons.rejected.connect(self.dialog.reject)
        self.layout.addWidget(buttons)

        self.dialog.exec()

    def save_complaint(self, source_code, complaint, dialog):
        try:
            # Connect to the SQLite database
            conn = sqlite3.connect(r'./Water_sources.db')
            cursor = conn.cursor()

            # Update the 'complaints' field in the 'sources' table
            cursor.execute("UPDATE sources SET complaints = ? WHERE source_code = ?", (complaint, source_code))

            # Commit the changes
            conn.commit()

            # Close the connection
            conn.close()

            QMessageBox.information(None, "Success", "Complaint added successfully.")
            self.dialog.accept()

        except Exception as e:
            QMessageBox.critical(None, "Error", f"An error occurred: {str(e)}")

    def populate_complaints_list(self):
        try:
                # Connect to the SQLite database
                conn = sqlite3.connect(r'./Water_sources.db')
                cursor = conn.cursor()

                # Access the 'sources' table and retrieve data
                cursor.execute("SELECT source_code, complaints FROM sources")
                data = cursor.fetchall()

                # Fill the list view with data
                for source_code, complaints in data:
                        item = QListWidgetItem(f"Source Code: {source_code}\nComplaints: {complaints}")
                        self.listView_complains.addItem(item)
                        self.listView_complains.setSpacing(5) 

                # Close the connection
                conn.close()

        except Exception as e:
                QMessageBox.critical(None, "Error", f"An error occurred: {str(e)}")




    

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
